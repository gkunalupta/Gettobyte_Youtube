
UART-interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  0000029c  00000330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000206  00800208  00800208  00000338  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000153b  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000de4  00000000  00000000  000019fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095b  00000000  00000000  000027df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  0000313c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b3  00000000  00000000  00003540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000faa  00000000  00000000  00003ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004e9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	80 c0       	rjmp	.+256    	; 0x166 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e9       	ldi	r30, 0x9C	; 156
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 30       	cpi	r26, 0x0E	; 14
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ac d0       	rcall	.+344    	; 0x278 <main>
 120:	bb c0       	rjmp	.+374    	; 0x298 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z10UART_Init0v>:
		if (buf[ptr] != '0') break;
	}
	for(;ptr>=0;--ptr) {
		UART_TxChar3(buf[ptr]);
	}
 124:	87 e6       	ldi	r24, 0x67	; 103
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 12c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 130:	88 e9       	ldi	r24, 0x98	; 152
 132:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 136:	08 95       	ret

00000138 <_Z12UART_TxChar0j>:
 138:	e0 ec       	ldi	r30, 0xC0	; 192
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	90 81       	ld	r25, Z
 13e:	95 ff       	sbrs	r25, 5
 140:	fd cf       	rjmp	.-6      	; 0x13c <_Z12UART_TxChar0j+0x4>
 142:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 146:	08 95       	ret

00000148 <_Z12printString0PKc>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	88 81       	ld	r24, Y
 150:	88 23       	and	r24, r24
 152:	31 f0       	breq	.+12     	; 0x160 <_Z12printString0PKc+0x18>
 154:	21 96       	adiw	r28, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	ef df       	rcall	.-34     	; 0x138 <_Z12UART_TxChar0j>
 15a:	89 91       	ld	r24, Y+
 15c:	81 11       	cpse	r24, r1
 15e:	fb cf       	rjmp	.-10     	; 0x156 <_Z12printString0PKc+0xe>
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <__vector_25>:
uint32_t RX_No_of_byte_UART0=0;

char RX_DATA_UART0[RX_BUFFER_SIZE_UART0];
 char rx_byte;
ISR(USART0_RX_vect)
{
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	0b b6       	in	r0, 0x3b	; 59
 172:	0f 92       	push	r0
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
 
 // We only ever get here when an RXC interrupt has occurred;
 // Therefore, we know that there must be at least 1 byte in UDR

 // get the 1st byte
 rx_byte = UDR0;
 180:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 184:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <__data_end>
 Rx_Buffer_UART0[RX_Wr_Index_UART0]= rx_byte;   /* put received char in buffer from head pointer */
 188:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <RX_Wr_Index_UART0>
 18c:	e8 2f       	mov	r30, r24
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	e1 5f       	subi	r30, 0xF1	; 241
 192:	fc 4f       	sbci	r31, 0xFC	; 252
 194:	90 83       	st	Z, r25
 if(++RX_Wr_Index_UART0 > RX_BUFFER_SIZE_UART0)
 196:	8f 5f       	subi	r24, 0xFF	; 255
 198:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <RX_Wr_Index_UART0>
 RX_Wr_Index_UART0 = 0;
 if(++RX_Counter_UART0 > RX_BUFFER_SIZE_UART0) /* keep a character count */
 19c:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <RX_Counter_UART0>
 1a0:	8f 5f       	subi	r24, 0xFF	; 255
 1a2:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <RX_Counter_UART0>
 { /* overflow check.. */
	 RX_Counter_UART0 = RX_BUFFER_SIZE_UART0; /* if too many chars came */
	 RX_Buffer_Overflow_UART0 = 1; /* in before they could be used */
	 } /* that could cause an error!! */
 RX_No_of_byte_UART0=RX_Counter_UART0 ;
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	a0 e0       	ldi	r26, 0x00	; 0
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <RX_No_of_byte_UART0>
 1b0:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <RX_No_of_byte_UART0+0x1>
 1b4:	a0 93 0a 03 	sts	0x030A, r26	; 0x80030a <RX_No_of_byte_UART0+0x2>
 1b8:	b0 93 0b 03 	sts	0x030B, r27	; 0x80030b <RX_No_of_byte_UART0+0x3>
//(Rx_Buffer_UART0);
//decimel0(RX_No_of_byte_UART0);
}
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0b be       	out	0x3b, r0	; 59
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <_Z13getchar_UART0v>:
char getchar_UART0()
{
	char c;
	c = Rx_Buffer_UART0[RX_Rd_Index_UART0]; /* get one from the buffer..*/
 1d6:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <RX_Rd_Index_UART0>
 1da:	e9 2f       	mov	r30, r25
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	e1 5f       	subi	r30, 0xF1	; 241
 1e0:	fc 4f       	sbci	r31, 0xFC	; 252
 1e2:	80 81       	ld	r24, Z
	if(++RX_Rd_Index_UART0 > RX_BUFFER_SIZE_UART0) /* wrap the pointer */
 1e4:	9f 5f       	subi	r25, 0xFF	; 255
 1e6:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <RX_Rd_Index_UART0>
	RX_Rd_Index_UART0 = 0;
	if(RX_No_of_byte_UART0)
 1ea:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <RX_No_of_byte_UART0>
 1ee:	50 91 09 03 	lds	r21, 0x0309	; 0x800309 <RX_No_of_byte_UART0+0x1>
 1f2:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <RX_No_of_byte_UART0+0x2>
 1f6:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <RX_No_of_byte_UART0+0x3>
 1fa:	41 15       	cp	r20, r1
 1fc:	51 05       	cpc	r21, r1
 1fe:	61 05       	cpc	r22, r1
 200:	71 05       	cpc	r23, r1
 202:	61 f0       	breq	.+24     	; 0x21c <_Z13getchar_UART0v+0x46>
	RX_No_of_byte_UART0--; /* keep a count (buffer size) */
 204:	41 50       	subi	r20, 0x01	; 1
 206:	51 09       	sbc	r21, r1
 208:	61 09       	sbc	r22, r1
 20a:	71 09       	sbc	r23, r1
 20c:	40 93 08 03 	sts	0x0308, r20	; 0x800308 <RX_No_of_byte_UART0>
 210:	50 93 09 03 	sts	0x0309, r21	; 0x800309 <RX_No_of_byte_UART0+0x1>
 214:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <RX_No_of_byte_UART0+0x2>
 218:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <RX_No_of_byte_UART0+0x3>
	return c;
	
}
 21c:	08 95       	ret

0000021e <_Z15getstring_UART0v>:
void getstring_UART0()
{
 21e:	cf 93       	push	r28
	
	uint8_t x=0;
	memset(RX_DATA_UART0, '\0',RX_BUFFER_SIZE_UART0);
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	e9 e0       	ldi	r30, 0x09	; 9
 224:	f2 e0       	ldi	r31, 0x02	; 2
 226:	df 01       	movw	r26, r30
 228:	1d 92       	st	X+, r1
 22a:	8a 95       	dec	r24
 22c:	e9 f7       	brne	.-6      	; 0x228 <_Z15getstring_UART0v+0xa>
	
	while (RX_No_of_byte_UART0)
 22e:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <RX_No_of_byte_UART0>
 232:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <RX_No_of_byte_UART0+0x1>
 236:	a0 91 0a 03 	lds	r26, 0x030A	; 0x80030a <RX_No_of_byte_UART0+0x2>
 23a:	b0 91 0b 03 	lds	r27, 0x030B	; 0x80030b <RX_No_of_byte_UART0+0x3>
 23e:	89 2b       	or	r24, r25
 240:	8a 2b       	or	r24, r26
 242:	8b 2b       	or	r24, r27
 244:	a1 f0       	breq	.+40     	; 0x26e <_Z15getstring_UART0v+0x50>
 246:	c0 e0       	ldi	r28, 0x00	; 0
	{
		RX_DATA_UART0[x]= getchar_UART0();
 248:	c6 df       	rcall	.-116    	; 0x1d6 <_Z13getchar_UART0v>
 24a:	ec 2f       	mov	r30, r28
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	e7 5f       	subi	r30, 0xF7	; 247
 250:	fd 4f       	sbci	r31, 0xFD	; 253
 252:	80 83       	st	Z, r24
		x++;
 254:	cf 5f       	subi	r28, 0xFF	; 255
{
	
	uint8_t x=0;
	memset(RX_DATA_UART0, '\0',RX_BUFFER_SIZE_UART0);
	
	while (RX_No_of_byte_UART0)
 256:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <RX_No_of_byte_UART0>
 25a:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <RX_No_of_byte_UART0+0x1>
 25e:	a0 91 0a 03 	lds	r26, 0x030A	; 0x80030a <RX_No_of_byte_UART0+0x2>
 262:	b0 91 0b 03 	lds	r27, 0x030B	; 0x80030b <RX_No_of_byte_UART0+0x3>
 266:	89 2b       	or	r24, r25
 268:	8a 2b       	or	r24, r26
 26a:	8b 2b       	or	r24, r27
 26c:	69 f7       	brne	.-38     	; 0x248 <_Z15getstring_UART0v+0x2a>
	{
		RX_DATA_UART0[x]= getchar_UART0();
		x++;
		
	}
	printString0(RX_DATA_UART0);
 26e:	89 e0       	ldi	r24, 0x09	; 9
 270:	92 e0       	ldi	r25, 0x02	; 2
 272:	6a df       	rcall	.-300    	; 0x148 <_Z12printString0PKc>
	
	
}
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <main>:
int main(void)
{
	UART_Init0();
 278:	55 df       	rcall	.-342    	; 0x124 <_Z10UART_Init0v>
	printString0("kunal\n");
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	92 e0       	ldi	r25, 0x02	; 2
 27e:	64 df       	rcall	.-312    	; 0x148 <_Z12printString0PKc>
	sei();
 280:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		//printString0("kunal\n");
	    //printString0("gettobyte\n");
	  getstring_UART0();
 282:	cd df       	rcall	.-102    	; 0x21e <_Z15getstring_UART0v>
 284:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 286:	83 ed       	ldi	r24, 0xD3	; 211
 288:	90 e3       	ldi	r25, 0x30	; 48
 28a:	21 50       	subi	r18, 0x01	; 1
 28c:	80 40       	sbci	r24, 0x00	; 0
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <main+0x12>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x1c>
 294:	00 00       	nop
 296:	f5 cf       	rjmp	.-22     	; 0x282 <main+0xa>

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
