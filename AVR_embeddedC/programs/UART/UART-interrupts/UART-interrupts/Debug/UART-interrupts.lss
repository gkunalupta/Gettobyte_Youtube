
UART-interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  0000037c  00000410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000206  00800208  00800208  00000418  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014b5  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d65  00000000  00000000  00001a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ec  00000000  00000000  000027ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003fc  00000000  00000000  000030a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000971  00000000  00000000  000034a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f89  00000000  00000000  00003e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004d9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	e1 c0       	rjmp	.+450    	; 0x228 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e7       	ldi	r30, 0x7C	; 124
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 30       	cpi	r26, 0x0E	; 14
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	03 d1       	rcall	.+518    	; 0x326 <main>
 120:	2b c1       	rjmp	.+598    	; 0x378 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z10UART_Init0v>:
		if (buf[ptr] != '0') break;
	}
	for(;ptr>=0;--ptr) {
		UART_TxChar3(buf[ptr]);
	}
 124:	87 e6       	ldi	r24, 0x67	; 103
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 12c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 130:	88 e9       	ldi	r24, 0x98	; 152
 132:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 136:	08 95       	ret

00000138 <_Z12UART_TxChar0j>:
 138:	e0 ec       	ldi	r30, 0xC0	; 192
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	90 81       	ld	r25, Z
 13e:	95 ff       	sbrs	r25, 5
 140:	fd cf       	rjmp	.-6      	; 0x13c <_Z12UART_TxChar0j+0x4>
 142:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 146:	08 95       	ret

00000148 <_Z12printString0PKc>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	88 81       	ld	r24, Y
 150:	88 23       	and	r24, r24
 152:	31 f0       	breq	.+12     	; 0x160 <_Z12printString0PKc+0x18>
 154:	21 96       	adiw	r28, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	ef df       	rcall	.-34     	; 0x138 <_Z12UART_TxChar0j>
 15a:	89 91       	ld	r24, Y+
 15c:	81 11       	cpse	r24, r1
 15e:	fb cf       	rjmp	.-10     	; 0x156 <_Z12printString0PKc+0xe>
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <_Z8decimel0m>:
 166:	8f 92       	push	r8
 168:	9f 92       	push	r9
 16a:	af 92       	push	r10
 16c:	bf 92       	push	r11
 16e:	ef 92       	push	r14
 170:	ff 92       	push	r15
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	00 d0       	rcall	.+0      	; 0x17c <_Z8decimel0m+0x16>
 17c:	1f 92       	push	r1
 17e:	1f 92       	push	r1
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
 184:	8e 01       	movw	r16, r28
 186:	0f 5f       	subi	r16, 0xFF	; 255
 188:	1f 4f       	sbci	r17, 0xFF	; 255
 18a:	7e 01       	movw	r14, r28
 18c:	26 e0       	ldi	r18, 0x06	; 6
 18e:	e2 0e       	add	r14, r18
 190:	f1 1c       	adc	r15, r1
 192:	0f 2e       	mov	r0, r31
 194:	fa e0       	ldi	r31, 0x0A	; 10
 196:	8f 2e       	mov	r8, r31
 198:	91 2c       	mov	r9, r1
 19a:	a1 2c       	mov	r10, r1
 19c:	b1 2c       	mov	r11, r1
 19e:	f0 2d       	mov	r31, r0
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_Z8decimel0m+0x44>
 1a2:	8d 81       	ldd	r24, Y+5	; 0x05
 1a4:	80 33       	cpi	r24, 0x30	; 48
 1a6:	81 f0       	breq	.+32     	; 0x1c8 <_Z8decimel0m+0x62>
 1a8:	1a c0       	rjmp	.+52     	; 0x1de <_Z8decimel0m+0x78>
 1aa:	a5 01       	movw	r20, r10
 1ac:	94 01       	movw	r18, r8
 1ae:	c2 d0       	rcall	.+388    	; 0x334 <__udivmodsi4>
 1b0:	60 5d       	subi	r22, 0xD0	; 208
 1b2:	f8 01       	movw	r30, r16
 1b4:	61 93       	st	Z+, r22
 1b6:	8f 01       	movw	r16, r30
 1b8:	62 2f       	mov	r22, r18
 1ba:	73 2f       	mov	r23, r19
 1bc:	84 2f       	mov	r24, r20
 1be:	95 2f       	mov	r25, r21
 1c0:	ee 15       	cp	r30, r14
 1c2:	ff 05       	cpc	r31, r15
 1c4:	91 f7       	brne	.-28     	; 0x1aa <_Z8decimel0m+0x44>
 1c6:	ed cf       	rjmp	.-38     	; 0x1a2 <_Z8decimel0m+0x3c>
 1c8:	8c 81       	ldd	r24, Y+4	; 0x04
 1ca:	80 33       	cpi	r24, 0x30	; 48
 1cc:	b9 f4       	brne	.+46     	; 0x1fc <_Z8decimel0m+0x96>
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	80 33       	cpi	r24, 0x30	; 48
 1d2:	b1 f4       	brne	.+44     	; 0x200 <_Z8decimel0m+0x9a>
 1d4:	8a 81       	ldd	r24, Y+2	; 0x02
 1d6:	80 33       	cpi	r24, 0x30	; 48
 1d8:	a9 f4       	brne	.+42     	; 0x204 <_Z8decimel0m+0x9e>
 1da:	10 e0       	ldi	r17, 0x00	; 0
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <_Z8decimel0m+0x7a>
 1de:	14 e0       	ldi	r17, 0x04	; 4
 1e0:	e1 e0       	ldi	r30, 0x01	; 1
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ec 0f       	add	r30, r28
 1e6:	fd 1f       	adc	r31, r29
 1e8:	e1 0f       	add	r30, r17
 1ea:	f1 1d       	adc	r31, r1
 1ec:	17 fd       	sbrc	r17, 7
 1ee:	fa 95       	dec	r31
 1f0:	80 81       	ld	r24, Z
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	a1 df       	rcall	.-190    	; 0x138 <_Z12UART_TxChar0j>
 1f6:	11 50       	subi	r17, 0x01	; 1
 1f8:	9a f7       	brpl	.-26     	; 0x1e0 <_Z8decimel0m+0x7a>
 1fa:	06 c0       	rjmp	.+12     	; 0x208 <_Z8decimel0m+0xa2>
 1fc:	13 e0       	ldi	r17, 0x03	; 3
 1fe:	f0 cf       	rjmp	.-32     	; 0x1e0 <_Z8decimel0m+0x7a>
 200:	12 e0       	ldi	r17, 0x02	; 2
 202:	ee cf       	rjmp	.-36     	; 0x1e0 <_Z8decimel0m+0x7a>
 204:	11 e0       	ldi	r17, 0x01	; 1
 206:	ec cf       	rjmp	.-40     	; 0x1e0 <_Z8decimel0m+0x7a>
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	bf 90       	pop	r11
 220:	af 90       	pop	r10
 222:	9f 90       	pop	r9
 224:	8f 90       	pop	r8
 226:	08 95       	ret

00000228 <__vector_25>:
uint32_t RX_No_of_byte_UART0=0;

char RX_DATA_UART0[RX_BUFFER_SIZE_UART0];
 char rx_byte;
ISR(USART0_RX_vect)
{
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	0b b6       	in	r0, 0x3b	; 59
 234:	0f 92       	push	r0
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
 
 // We only ever get here when an RXC interrupt has occurred;
 // Therefore, we know that there must be at least 1 byte in UDR

 // get the 1st byte
 rx_byte = UDR0;
 242:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 246:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <__data_end>
 Rx_Buffer_UART0[RX_Wr_Index_UART0]= rx_byte;   /* put received char in buffer from head pointer */
 24a:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <RX_Wr_Index_UART0>
 24e:	e8 2f       	mov	r30, r24
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	e1 5f       	subi	r30, 0xF1	; 241
 254:	fc 4f       	sbci	r31, 0xFC	; 252
 256:	90 83       	st	Z, r25
 if(++RX_Wr_Index_UART0 > RX_BUFFER_SIZE_UART0)
 258:	8f 5f       	subi	r24, 0xFF	; 255
 25a:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <RX_Wr_Index_UART0>
 RX_Wr_Index_UART0 = 0;
 if(++RX_Counter_UART0 > RX_BUFFER_SIZE_UART0) /* keep a character count */
 25e:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <RX_Counter_UART0>
 262:	8f 5f       	subi	r24, 0xFF	; 255
 264:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <RX_Counter_UART0>
 { /* overflow check.. */
	 RX_Counter_UART0 = RX_BUFFER_SIZE_UART0; /* if too many chars came */
	 RX_Buffer_Overflow_UART0 = 1; /* in before they could be used */
	 } /* that could cause an error!! */
 RX_No_of_byte_UART0=RX_Counter_UART0 ;
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	a0 e0       	ldi	r26, 0x00	; 0
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <RX_No_of_byte_UART0>
 272:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <RX_No_of_byte_UART0+0x1>
 276:	a0 93 0a 03 	sts	0x030A, r26	; 0x80030a <RX_No_of_byte_UART0+0x2>
 27a:	b0 93 0b 03 	sts	0x030B, r27	; 0x80030b <RX_No_of_byte_UART0+0x3>
//(Rx_Buffer_UART0);
//decimel0(RX_No_of_byte_UART0);
}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	0f 90       	pop	r0
 28c:	0b be       	out	0x3b, r0	; 59
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <_Z13getchar_UART0v>:
char getchar_UART0()
{
	char c;
	c = Rx_Buffer_UART0[RX_Rd_Index_UART0]; /* get one from the buffer..*/
 298:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <RX_Rd_Index_UART0>
 29c:	e9 2f       	mov	r30, r25
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	e1 5f       	subi	r30, 0xF1	; 241
 2a2:	fc 4f       	sbci	r31, 0xFC	; 252
 2a4:	80 81       	ld	r24, Z
	if(++RX_Rd_Index_UART0 > RX_BUFFER_SIZE_UART0) /* wrap the pointer */
 2a6:	9f 5f       	subi	r25, 0xFF	; 255
 2a8:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <RX_Rd_Index_UART0>
	RX_Rd_Index_UART0 = 0;
	if(RX_No_of_byte_UART0)
 2ac:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <RX_No_of_byte_UART0>
 2b0:	50 91 09 03 	lds	r21, 0x0309	; 0x800309 <RX_No_of_byte_UART0+0x1>
 2b4:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <RX_No_of_byte_UART0+0x2>
 2b8:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <RX_No_of_byte_UART0+0x3>
 2bc:	41 15       	cp	r20, r1
 2be:	51 05       	cpc	r21, r1
 2c0:	61 05       	cpc	r22, r1
 2c2:	71 05       	cpc	r23, r1
 2c4:	61 f0       	breq	.+24     	; 0x2de <_Z13getchar_UART0v+0x46>
	RX_No_of_byte_UART0--; /* keep a count (buffer size) */
 2c6:	41 50       	subi	r20, 0x01	; 1
 2c8:	51 09       	sbc	r21, r1
 2ca:	61 09       	sbc	r22, r1
 2cc:	71 09       	sbc	r23, r1
 2ce:	40 93 08 03 	sts	0x0308, r20	; 0x800308 <RX_No_of_byte_UART0>
 2d2:	50 93 09 03 	sts	0x0309, r21	; 0x800309 <RX_No_of_byte_UART0+0x1>
 2d6:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <RX_No_of_byte_UART0+0x2>
 2da:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <RX_No_of_byte_UART0+0x3>
	return c;
	
}
 2de:	08 95       	ret

000002e0 <_Z15getstring_UART0v>:
{
	//printString0(" Number of characters received : ");
	//decimel0(RX_No_of_byte_UART0);
	//printString0("\n");
	uint8_t x=0;
	memset(RX_DATA_UART0, '\0',RX_BUFFER_SIZE_UART0);
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	e9 e0       	ldi	r30, 0x09	; 9
 2e4:	f2 e0       	ldi	r31, 0x02	; 2
 2e6:	df 01       	movw	r26, r30
 2e8:	1d 92       	st	X+, r1
 2ea:	8a 95       	dec	r24
 2ec:	e9 f7       	brne	.-6      	; 0x2e8 <_Z15getstring_UART0v+0x8>
	decimel0(RX_No_of_byte_UART0);
 2ee:	60 91 08 03 	lds	r22, 0x0308	; 0x800308 <RX_No_of_byte_UART0>
 2f2:	70 91 09 03 	lds	r23, 0x0309	; 0x800309 <RX_No_of_byte_UART0+0x1>
 2f6:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <RX_No_of_byte_UART0+0x2>
 2fa:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <RX_No_of_byte_UART0+0x3>
 2fe:	33 df       	rcall	.-410    	; 0x166 <_Z8decimel0m>
	while (!RX_No_of_byte_UART0);
 300:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <RX_No_of_byte_UART0>
 304:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <RX_No_of_byte_UART0+0x1>
 308:	a0 91 0a 03 	lds	r26, 0x030A	; 0x80030a <RX_No_of_byte_UART0+0x2>
 30c:	b0 91 0b 03 	lds	r27, 0x030B	; 0x80030b <RX_No_of_byte_UART0+0x3>
 310:	00 97       	sbiw	r24, 0x00	; 0
 312:	a1 05       	cpc	r26, r1
 314:	b1 05       	cpc	r27, r1
	{
		RX_DATA_UART0[x]= getchar_UART0();
 316:	e1 f3       	breq	.-8      	; 0x310 <_Z15getstring_UART0v+0x30>
 318:	bf df       	rcall	.-130    	; 0x298 <_Z13getchar_UART0v>
 31a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <RX_DATA_UART0>
		x++;
		printString0(RX_DATA_UART0);
 31e:	89 e0       	ldi	r24, 0x09	; 9
 320:	92 e0       	ldi	r25, 0x02	; 2
 322:	12 cf       	rjmp	.-476    	; 0x148 <_Z12printString0PKc>
 324:	08 95       	ret

00000326 <main>:
	//_delay_ms(1000);
	
}
int main(void)
{
	UART_Init0();
 326:	fe de       	rcall	.-516    	; 0x124 <_Z10UART_Init0v>
	printString0("kunal\n");
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	92 e0       	ldi	r25, 0x02	; 2
 32c:	0d df       	rcall	.-486    	; 0x148 <_Z12printString0PKc>
	sei();
 32e:	78 94       	sei
	
    /* Replace with your application code */
    while (1) 
    {
	    
		    getstring_UART0();
 330:	d7 df       	rcall	.-82     	; 0x2e0 <_Z15getstring_UART0v>
 332:	fe cf       	rjmp	.-4      	; 0x330 <main+0xa>

00000334 <__udivmodsi4>:
 334:	a1 e2       	ldi	r26, 0x21	; 33
 336:	1a 2e       	mov	r1, r26
 338:	aa 1b       	sub	r26, r26
 33a:	bb 1b       	sub	r27, r27
 33c:	fd 01       	movw	r30, r26
 33e:	0d c0       	rjmp	.+26     	; 0x35a <__udivmodsi4_ep>

00000340 <__udivmodsi4_loop>:
 340:	aa 1f       	adc	r26, r26
 342:	bb 1f       	adc	r27, r27
 344:	ee 1f       	adc	r30, r30
 346:	ff 1f       	adc	r31, r31
 348:	a2 17       	cp	r26, r18
 34a:	b3 07       	cpc	r27, r19
 34c:	e4 07       	cpc	r30, r20
 34e:	f5 07       	cpc	r31, r21
 350:	20 f0       	brcs	.+8      	; 0x35a <__udivmodsi4_ep>
 352:	a2 1b       	sub	r26, r18
 354:	b3 0b       	sbc	r27, r19
 356:	e4 0b       	sbc	r30, r20
 358:	f5 0b       	sbc	r31, r21

0000035a <__udivmodsi4_ep>:
 35a:	66 1f       	adc	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	88 1f       	adc	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	1a 94       	dec	r1
 364:	69 f7       	brne	.-38     	; 0x340 <__udivmodsi4_loop>
 366:	60 95       	com	r22
 368:	70 95       	com	r23
 36a:	80 95       	com	r24
 36c:	90 95       	com	r25
 36e:	9b 01       	movw	r18, r22
 370:	ac 01       	movw	r20, r24
 372:	bd 01       	movw	r22, r26
 374:	cf 01       	movw	r24, r30
 376:	08 95       	ret

00000378 <_exit>:
 378:	f8 94       	cli

0000037a <__stop_program>:
 37a:	ff cf       	rjmp	.-2      	; 0x37a <__stop_program>
