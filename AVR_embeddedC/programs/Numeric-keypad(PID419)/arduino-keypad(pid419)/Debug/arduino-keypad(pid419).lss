
arduino-keypad(pid419).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000002a8  0000031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000151b  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000de0  00000000  00000000  000019b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000980  00000000  00000000  00002793  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003bc  00000000  00000000  00003114  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008e6  00000000  00000000  000034d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000105a  00000000  00000000  00003db6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00004e10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a9 c0       	rjmp	.+338    	; 0x154 <__ctors_end>
   2:	00 00       	nop
   4:	c6 c0       	rjmp	.+396    	; 0x192 <__bad_interrupt>
   6:	00 00       	nop
   8:	c4 c0       	rjmp	.+392    	; 0x192 <__bad_interrupt>
   a:	00 00       	nop
   c:	c2 c0       	rjmp	.+388    	; 0x192 <__bad_interrupt>
   e:	00 00       	nop
  10:	c0 c0       	rjmp	.+384    	; 0x192 <__bad_interrupt>
  12:	00 00       	nop
  14:	be c0       	rjmp	.+380    	; 0x192 <__bad_interrupt>
  16:	00 00       	nop
  18:	bc c0       	rjmp	.+376    	; 0x192 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ba c0       	rjmp	.+372    	; 0x192 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b8 c0       	rjmp	.+368    	; 0x192 <__bad_interrupt>
  22:	00 00       	nop
  24:	b6 c0       	rjmp	.+364    	; 0x192 <__bad_interrupt>
  26:	00 00       	nop
  28:	b4 c0       	rjmp	.+360    	; 0x192 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	b2 c0       	rjmp	.+356    	; 0x192 <__bad_interrupt>
  2e:	00 00       	nop
  30:	b0 c0       	rjmp	.+352    	; 0x192 <__bad_interrupt>
  32:	00 00       	nop
  34:	ae c0       	rjmp	.+348    	; 0x192 <__bad_interrupt>
  36:	00 00       	nop
  38:	ac c0       	rjmp	.+344    	; 0x192 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	aa c0       	rjmp	.+340    	; 0x192 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a8 c0       	rjmp	.+336    	; 0x192 <__bad_interrupt>
  42:	00 00       	nop
  44:	a6 c0       	rjmp	.+332    	; 0x192 <__bad_interrupt>
  46:	00 00       	nop
  48:	a4 c0       	rjmp	.+328    	; 0x192 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a2 c0       	rjmp	.+324    	; 0x192 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a0 c0       	rjmp	.+320    	; 0x192 <__bad_interrupt>
  52:	00 00       	nop
  54:	9e c0       	rjmp	.+316    	; 0x192 <__bad_interrupt>
  56:	00 00       	nop
  58:	9c c0       	rjmp	.+312    	; 0x192 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9a c0       	rjmp	.+308    	; 0x192 <__bad_interrupt>
  5e:	00 00       	nop
  60:	98 c0       	rjmp	.+304    	; 0x192 <__bad_interrupt>
  62:	00 00       	nop
  64:	96 c0       	rjmp	.+300    	; 0x192 <__bad_interrupt>
  66:	00 00       	nop
  68:	94 c0       	rjmp	.+296    	; 0x192 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	92 c0       	rjmp	.+292    	; 0x192 <__bad_interrupt>
  6e:	00 00       	nop
  70:	90 c0       	rjmp	.+288    	; 0x192 <__bad_interrupt>
  72:	00 00       	nop
  74:	8e c0       	rjmp	.+284    	; 0x192 <__bad_interrupt>
  76:	00 00       	nop
  78:	8c c0       	rjmp	.+280    	; 0x192 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8a c0       	rjmp	.+276    	; 0x192 <__bad_interrupt>
  7e:	00 00       	nop
  80:	88 c0       	rjmp	.+272    	; 0x192 <__bad_interrupt>
  82:	00 00       	nop
  84:	86 c0       	rjmp	.+268    	; 0x192 <__bad_interrupt>
  86:	00 00       	nop
  88:	84 c0       	rjmp	.+264    	; 0x192 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	82 c0       	rjmp	.+260    	; 0x192 <__bad_interrupt>
  8e:	00 00       	nop
  90:	80 c0       	rjmp	.+256    	; 0x192 <__bad_interrupt>
  92:	00 00       	nop
  94:	7e c0       	rjmp	.+252    	; 0x192 <__bad_interrupt>
  96:	00 00       	nop
  98:	7c c0       	rjmp	.+248    	; 0x192 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	7a c0       	rjmp	.+244    	; 0x192 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	78 c0       	rjmp	.+240    	; 0x192 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	76 c0       	rjmp	.+236    	; 0x192 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	74 c0       	rjmp	.+232    	; 0x192 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	72 c0       	rjmp	.+228    	; 0x192 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	70 c0       	rjmp	.+224    	; 0x192 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	6e c0       	rjmp	.+220    	; 0x192 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	6c c0       	rjmp	.+216    	; 0x192 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	6a c0       	rjmp	.+212    	; 0x192 <__bad_interrupt>
  be:	00 00       	nop
  c0:	68 c0       	rjmp	.+208    	; 0x192 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	66 c0       	rjmp	.+204    	; 0x192 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	64 c0       	rjmp	.+200    	; 0x192 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	62 c0       	rjmp	.+196    	; 0x192 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	60 c0       	rjmp	.+192    	; 0x192 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	5e c0       	rjmp	.+188    	; 0x192 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	5c c0       	rjmp	.+184    	; 0x192 <__bad_interrupt>
  da:	00 00       	nop
  dc:	5a c0       	rjmp	.+180    	; 0x192 <__bad_interrupt>
  de:	00 00       	nop
  e0:	58 c0       	rjmp	.+176    	; 0x192 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	34 01       	movw	r6, r8
  e6:	36 01       	movw	r6, r12
  e8:	36 01       	movw	r6, r12
  ea:	36 01       	movw	r6, r12
  ec:	2e 01       	movw	r4, r28
  ee:	36 01       	movw	r6, r12
  f0:	28 01       	movw	r4, r16
  f2:	42 01       	movw	r8, r4
  f4:	36 01       	movw	r6, r12
  f6:	36 01       	movw	r6, r12
  f8:	36 01       	movw	r6, r12
  fa:	36 01       	movw	r6, r12
  fc:	36 01       	movw	r6, r12
  fe:	36 01       	movw	r6, r12
 100:	36 01       	movw	r6, r12
 102:	36 01       	movw	r6, r12
 104:	36 01       	movw	r6, r12
 106:	36 01       	movw	r6, r12
 108:	36 01       	movw	r6, r12
 10a:	36 01       	movw	r6, r12
 10c:	36 01       	movw	r6, r12
 10e:	36 01       	movw	r6, r12
 110:	36 01       	movw	r6, r12
 112:	36 01       	movw	r6, r12
 114:	36 01       	movw	r6, r12
 116:	36 01       	movw	r6, r12
 118:	36 01       	movw	r6, r12
 11a:	36 01       	movw	r6, r12
 11c:	36 01       	movw	r6, r12
 11e:	36 01       	movw	r6, r12
 120:	36 01       	movw	r6, r12
 122:	36 01       	movw	r6, r12
 124:	32 01       	movw	r6, r4
 126:	36 01       	movw	r6, r12
 128:	36 01       	movw	r6, r12
 12a:	36 01       	movw	r6, r12
 12c:	2c 01       	movw	r4, r24
 12e:	36 01       	movw	r6, r12
 130:	26 01       	movw	r4, r12
 132:	22 01       	movw	r4, r4
 134:	36 01       	movw	r6, r12
 136:	36 01       	movw	r6, r12
 138:	36 01       	movw	r6, r12
 13a:	36 01       	movw	r6, r12
 13c:	36 01       	movw	r6, r12
 13e:	36 01       	movw	r6, r12
 140:	36 01       	movw	r6, r12
 142:	36 01       	movw	r6, r12
 144:	30 01       	movw	r6, r0
 146:	36 01       	movw	r6, r12
 148:	36 01       	movw	r6, r12
 14a:	36 01       	movw	r6, r12
 14c:	2a 01       	movw	r4, r20
 14e:	36 01       	movw	r6, r12
 150:	24 01       	movw	r4, r8
 152:	40 01       	movw	r8, r0

00000154 <__ctors_end>:
 154:	11 24       	eor	r1, r1
 156:	1f be       	out	0x3f, r1	; 63
 158:	cf ef       	ldi	r28, 0xFF	; 255
 15a:	d1 e2       	ldi	r29, 0x21	; 33
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	cd bf       	out	0x3d, r28	; 61
 160:	00 e0       	ldi	r16, 0x00	; 0
 162:	0c bf       	out	0x3c, r16	; 60

00000164 <__do_copy_data>:
 164:	12 e0       	ldi	r17, 0x02	; 2
 166:	a0 e0       	ldi	r26, 0x00	; 0
 168:	b2 e0       	ldi	r27, 0x02	; 2
 16a:	e8 ea       	ldi	r30, 0xA8	; 168
 16c:	f2 e0       	ldi	r31, 0x02	; 2
 16e:	00 e0       	ldi	r16, 0x00	; 0
 170:	0b bf       	out	0x3b, r16	; 59
 172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x14>
 174:	07 90       	elpm	r0, Z+
 176:	0d 92       	st	X+, r0
 178:	a2 30       	cpi	r26, 0x02	; 2
 17a:	b1 07       	cpc	r27, r17
 17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0x10>

0000017e <__do_clear_bss>:
 17e:	22 e0       	ldi	r18, 0x02	; 2
 180:	a2 e0       	ldi	r26, 0x02	; 2
 182:	b2 e0       	ldi	r27, 0x02	; 2
 184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
 186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
 188:	a2 30       	cpi	r26, 0x02	; 2
 18a:	b2 07       	cpc	r27, r18
 18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
 18e:	7d d0       	rcall	.+250    	; 0x28a <main>
 190:	89 c0       	rjmp	.+274    	; 0x2a4 <_exit>

00000192 <__bad_interrupt>:
 192:	36 cf       	rjmp	.-404    	; 0x0 <__vectors>

00000194 <_Z10UART_Init0v>:
		if (buf[ptr] != '0') break;
	}
	for(;ptr>=0;--ptr) {
		UART_TxChar3(buf[ptr]);
	}
 194:	87 e6       	ldi	r24, 0x67	; 103
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 19c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 1a0:	88 e9       	ldi	r24, 0x98	; 152
 1a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 1a6:	08 95       	ret

000001a8 <_Z12UART_TxChar0j>:
 1a8:	e0 ec       	ldi	r30, 0xC0	; 192
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	90 81       	ld	r25, Z
 1ae:	95 ff       	sbrs	r25, 5
 1b0:	fd cf       	rjmp	.-6      	; 0x1ac <_Z12UART_TxChar0j+0x4>
 1b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 1b6:	08 95       	ret

000001b8 <_Z12printString0PKc>:
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	ec 01       	movw	r28, r24
 1be:	88 81       	ld	r24, Y
 1c0:	88 23       	and	r24, r24
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <_Z12printString0PKc+0x18>
 1c4:	21 96       	adiw	r28, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	ef df       	rcall	.-34     	; 0x1a8 <_Z12UART_TxChar0j>
 1ca:	89 91       	ld	r24, Y+
 1cc:	81 11       	cpse	r24, r1
 1ce:	fb cf       	rjmp	.-10     	; 0x1c6 <_Z12printString0PKc+0xe>
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <_Z6getkeyv>:
#define C1 4
#define C2 5
#define C3 6

 uint8_t getkey()
 {
 1d6:	cf 93       	push	r28
	  uint8_t keypressed=0;
	  
	  DDRC = 0b00001111;           // Column as input (PC6,PC5,PC4 th bit ) : set as 0(C3,C2,C1)
 1d8:	8f e0       	ldi	r24, 0x0F	; 15
 1da:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	8f e9       	ldi	r24, 0x9F	; 159
 1de:	9f e0       	ldi	r25, 0x0F	; 15
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <_Z6getkeyv+0xa>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <_Z6getkeyv+0x10>
 1e6:	00 00       	nop
	                               // Row as output (PC3,PC2,PC1,PC0 th bit ) : set as 1(R4,R3,R2,R1)
	  _delay_ms(1);
	  PORTC = 0b11110000;          // Column pins:Input pins pull up resistor is activated by setting 1 to PORTC column pins
 1e8:	80 ef       	ldi	r24, 0xF0	; 240
 1ea:	88 b9       	out	0x08, r24	; 8
 1ec:	8f e9       	ldi	r24, 0x9F	; 159
 1ee:	9f e0       	ldi	r25, 0x0F	; 15
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <_Z6getkeyv+0x1a>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <_Z6getkeyv+0x20>
 1f6:	00 00       	nop
	                               //Row pins: Output pins are set to Low(0)
	  _delay_ms(1);
	  
	  
	  while(PINC == 0b11110000);    // If any button will be pressed then either of the PC6,PC5,PC4th bit (C3,C2,C1) will be made to 0 , hence
 1f8:	86 b1       	in	r24, 0x06	; 6
 1fa:	80 3f       	cpi	r24, 0xF0	; 240
 1fc:	e9 f3       	breq	.-6      	; 0x1f8 <_Z6getkeyv+0x22>
	                                // if C1 is pressed : 11100000
	                                // if C2 is pressed : 11010000
	                                // if C3 is pressed : 10110000
	                                
									
	  keypressed = PINC;           //Stores the Value of which column is pressed in keypressed variable
 1fe:	c6 b1       	in	r28, 0x06	; 6
	  
	  DDRC = 0b01110000;           //Columns as output(PC6,PC5,PC4 th bit): set as 1(C3,C2,C1)
 200:	80 e7       	ldi	r24, 0x70	; 112
 202:	87 b9       	out	0x07, r24	; 7
 204:	8f e9       	ldi	r24, 0x9F	; 159
 206:	9f e0       	ldi	r25, 0x0F	; 15
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <_Z6getkeyv+0x32>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <_Z6getkeyv+0x38>
 20e:	00 00       	nop
	                               //Row as input(PC3,PC2,PC1,PC0 th bit) : set as 0(R4,R3,R2,R1)
	  _delay_ms(1);
	  PORTC = 0b10001111;          // Column pins:Output pins are set to Low(0)
 210:	8f e8       	ldi	r24, 0x8F	; 143
 212:	88 b9       	out	0x08, r24	; 8
 214:	8f e9       	ldi	r24, 0x9F	; 159
 216:	9f e0       	ldi	r25, 0x0F	; 15
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <_Z6getkeyv+0x42>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <_Z6getkeyv+0x48>
 21e:	00 00       	nop
                                   // if R1 is pressed --> 10001110
                                   // if R2 is pressed --> 10001101
                                   // if R3 is pressed --> 10001011
                                   // if R4 is pressed --> 10000111
	  
	  keypressed |= PINC;          // ORing the value of ROW and Column pressed when they are set as input respectively
 220:	86 b1       	in	r24, 0x06	; 6
 222:	c8 2b       	or	r28, r24
	  
	 // bit0(keypressed);
	  printString0("\n");
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	92 e0       	ldi	r25, 0x02	; 2
 228:	c7 df       	rcall	.-114    	; 0x1b8 <_Z12printString0PKc>

	  switch (keypressed)
 22a:	8c 2f       	mov	r24, r28
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	fc 01       	movw	r30, r24
 230:	e7 5b       	subi	r30, 0xB7	; 183
 232:	f1 09       	sbc	r31, r1
 234:	e8 33       	cpi	r30, 0x38	; 56
 236:	f1 05       	cpc	r31, r1
 238:	c8 f4       	brcc	.+50     	; 0x26c <_Z6getkeyv+0x96>
 23a:	88 27       	eor	r24, r24
 23c:	ee 58       	subi	r30, 0x8E	; 142
 23e:	ff 4f       	sbci	r31, 0xFF	; 255
 240:	8f 4f       	sbci	r24, 0xFF	; 255
 242:	28 c0       	rjmp	.+80     	; 0x294 <__tablejump2__>
							break;
							 
		 case(0b11011110):  //decimel0(2);               //C2:   11010000
		                                                 //R1: | 10001110
		                    //printString0(": ");
		                    return('2');
 244:	82 e3       	ldi	r24, 0x32	; 50
 246:	1f c0       	rjmp	.+62     	; 0x286 <_Z6getkeyv+0xb0>
		                    return('3');
							break;
							
		 case(0b11101101):  //decimel0(4);               //C1:   11100000
		                    //printString0(": ");        //R2: | 10001101
		                    return('4');
 248:	84 e3       	ldi	r24, 0x34	; 52
 24a:	1d c0       	rjmp	.+58     	; 0x286 <_Z6getkeyv+0xb0>
							break;
							
		 case(0b11011101):  //decimel0(5);               //C2:   11010000
		  		            //printString0(": ");        //R2: | 10001101
							 return('5'); 
 24c:	85 e3       	ldi	r24, 0x35	; 53
 24e:	1b c0       	rjmp	.+54     	; 0x286 <_Z6getkeyv+0xb0>
							break;
							
		  case(0b10111101): //decimel0(6);              //C3:   10110000
		                    //printString0(": ");      //R2:  | 10001101
							return('6');
 250:	86 e3       	ldi	r24, 0x36	; 54
 252:	19 c0       	rjmp	.+50     	; 0x286 <_Z6getkeyv+0xb0>
							break;
							
		  case(0b11101011):// decimel0(7);              //C1:   11100000
		                    //printString0(": ");       //R3: | 10001011
							return('7');
 254:	87 e3       	ldi	r24, 0x37	; 55
 256:	17 c0       	rjmp	.+46     	; 0x286 <_Z6getkeyv+0xb0>
							break;
							
		  case(0b11011011): //decimel0(8);              //C2:   11010000
		                    //printString0(": ");       //R3: | 10001011
							return('8');
 258:	88 e3       	ldi	r24, 0x38	; 56
 25a:	15 c0       	rjmp	.+42     	; 0x286 <_Z6getkeyv+0xb0>
							break;
							
		  case(0b10111011): //decimel0(9);             //C3:   10110000
		                    //printString0(": ");      //R3: | 10001011
							return('9');
 25c:	89 e3       	ldi	r24, 0x39	; 57
 25e:	13 c0       	rjmp	.+38     	; 0x286 <_Z6getkeyv+0xb0>
							break;
							
		  case(0b11100111):// UART_TxChar0('*');       //C1:   11100000
		                    //printString0(": ");      //R4: | 10000111
							return('*');
 260:	8a e2       	ldi	r24, 0x2A	; 42
 262:	11 c0       	rjmp	.+34     	; 0x286 <_Z6getkeyv+0xb0>
							break;
						
		  case(0b11010111): //decimel0(0);             //C2:   11010000
		                   // printString0(": ");      //R4: | 10000111
		                   return('0');
 264:	80 e3       	ldi	r24, 0x30	; 48
 266:	0f c0       	rjmp	.+30     	; 0x286 <_Z6getkeyv+0xb0>
							break;
							
		  case(0b10110111):  //UART_TxChar0('#');       //C3:   10110000
		                     //printString0(": ");      //R4: | 10000111
							 return('#');
 268:	83 e2       	ldi	r24, 0x23	; 35
 26a:	0d c0       	rjmp	.+26     	; 0x286 <_Z6getkeyv+0xb0>
 26c:	9f ef       	ldi	r25, 0xFF	; 255
 26e:	21 ee       	ldi	r18, 0xE1	; 225
 270:	84 e0       	ldi	r24, 0x04	; 4
 272:	91 50       	subi	r25, 0x01	; 1
 274:	20 40       	sbci	r18, 0x00	; 0
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <_Z6getkeyv+0x9c>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <_Z6getkeyv+0xa6>
 27c:	00 00       	nop
							 
	  }
	 
	
     _delay_ms(100);
}
 27e:	03 c0       	rjmp	.+6      	; 0x286 <_Z6getkeyv+0xb0>
	  switch (keypressed)
	  {
		 case(0b11101110):  //decimel0(1);               //C1:   11100000
		                                                 //R1: | 10001110
		                    //printString0(": ");
							return('1');
 280:	81 e3       	ldi	r24, 0x31	; 49
 282:	01 c0       	rjmp	.+2      	; 0x286 <_Z6getkeyv+0xb0>
		                    return('2');
		                    break;
		 
		 case(0b10111110):  //decimel0(3);               //C3:   10110000
		                    //printString0(": ");        //R1: | 10001110
		                    return('3');
 284:	83 e3       	ldi	r24, 0x33	; 51
							 
	  }
	 
	
     _delay_ms(100);
}
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <main>:

int main()
{
	UART_Init0();
 28a:	84 df       	rcall	.-248    	; 0x194 <_Z10UART_Init0v>
	uint8_t a=0;
	
	while (1)
	{
		a = getkey();
 28c:	a4 df       	rcall	.-184    	; 0x1d6 <_Z6getkeyv>
		UART_TxChar0(a);
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	8b df       	rcall	.-234    	; 0x1a8 <_Z12UART_TxChar0j>
 292:	fc cf       	rjmp	.-8      	; 0x28c <main+0x2>

00000294 <__tablejump2__>:
 294:	ee 0f       	add	r30, r30
 296:	ff 1f       	adc	r31, r31
 298:	88 1f       	adc	r24, r24
 29a:	8b bf       	out	0x3b, r24	; 59
 29c:	07 90       	elpm	r0, Z+
 29e:	f6 91       	elpm	r31, Z
 2a0:	e0 2d       	mov	r30, r0
 2a2:	19 94       	eijmp

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
